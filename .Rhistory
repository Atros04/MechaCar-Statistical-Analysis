load("~/College/UCSD Extension/UCSD-VIRT-DATA-PT-05-2022-U-B/15-R/1/Activities/01_Ins_RBasics/Solved/.RData")
install.packages("tidyverse")
install.packages("jsonlite")
setwd("~/College/UCSD Extension/UCSD-VIRT-DATA-PT-05-2022-U-B/15-R")
setwd("~/College/UCSD Extension/Module 15")
demo_table[sample(1:nrow(demo_table), 3),]
demo_table <- read.csv(file = "demo.csv", stringsAsFactors = F)
demo_table <- read.csv(file = "demo.csv", stringsAsFactors = F)
library(jsonlite)
demo_table2 <- fromJSON(txt = "demo.json")
demo_table[sample(1:nrow(demo_table), 3),]
demo_table[sample(1:nrow(demo_table), 3),]
demo_table3 <- read.csv(file = "demo2.csv",check.names = F,stringsAsFactors = F)
View(demo_table3)
library(tidyverse)
demo_table3 <- read.csv(file = "demo2.csv",check.names = F,stringsAsFactors = F)
long_table <- demo_table3 %>% gather(key="Metric",value="Score",buying_price:popularity)
View(long_table)
wide_table <- long_table %>% spread(key="Metric",value = "Score")
View(wide_table)
View(long_table)
head(mpg)
head(mpg)
plt <- ggplot(mpg,aes(x=class))
plt + geom_bar()
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_count=n(),.groups = 'keep')
plt <- ggplot(mpg_summary,aes(x=manufacturer,y=Vehicle_Count))
plt + geom_bar()
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(),.groups = 'keep')
plt <- ggplot(mpg_summary,aes(x=manufacturer,y=Vehicle_Count))
plt + geom_bar()
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(), .groups = 'keep')
plt <- ggplot(mpg_summary,aes(x=manufacturer,y=Vehicle_Count))
plt + geom_bar()
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(), .groups = 'keep')
plt <- ggplot(mpg_summary,aes(x=manufacturer,y=Vehicle_Count)) #import dataset into ggplot2
plt + geom_col() #plot a bar plot
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(), .groups = 'keep')
plt <- ggplot(mpg_summary,aes(x=manufacturer,y=Vehicle_Count)) #import dataset into ggplot2
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset")
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(), .groups = 'keep')
plt <- ggplot(mpg_summary,aes(x=manufacturer,y=Vehicle_Count)) #import dataset into ggplot2
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") + theme(axis.text.x=element_text(angle=45,hjust=1))
```{r}
mpg_summary <- subset(mpg,manufacturer=="toyota") %>% group_by(cyl) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=cyl,y=Mean_Hwy)) #import dataset into ggplot2
mpg_summary <- subset(mpg,manufacturer=="toyota") %>% group_by(cyl) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=cyl,y=Mean_Hwy)) #import dataset into ggplot2
plt + geom_line()
mpg_summary <- subset(mpg,manufacturer=="toyota") %>% group_by(cyl) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=cyl,y=Mean_Hwy)) #import dataset into ggplot2
plt + geom_line() + scale_x_discrete(limits=c(4,6,8)) + scale_y_continuous(breaks = c(15:30))
plt <- ggplot(mpg,aes(x=displ,y=cty))
plt + geom_point() + xlab("Engine Size (L)") + ylab("City Fuel-Efficiency (MPG)")
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class)) #import dataset into ggplot2
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class")
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class)) #import dataset into ggplot2
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class",shape="Type of Drive")
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class,shape=drv)) #import dataset into ggplot2
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class",shape="Type of Drive")
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1)) #add boxplot and rotate x-axis labels 45 degrees
mpg_summary <- mpg %>% group_by(class,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=class,y=factor(year),fill=Mean_Hwy))
plt + geom_tile() + labs(x="Vehicle Class",y="Vehicle Year",fill="Mean Highway (MPG)") #create heatmap with labels
ggplot(mtcars,aes(x=wt)) + geom_density() #visualize distribution using density plot
setwd("~/College/UCSD Extension/Module 15/MechaCar-Statistical-Analysis")
# Import packages and Read Data
library(dplyr)
CarMPG <- read.csv("MechaCar_mpg.csv")
carDF <- as.data.frame(CarMPG)
View(carDF)
View(CarMPG)
View(carDF)
View(carDF)
# Run the linear regression on the columns
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data = carDF)
# Run the linear regression on the columns
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data = carDF))
# Read suspension Data
coilDF <- as.data.frame(read.csv("Suspension_Coil.csv"))
View(coilDF)
# Read suspension Data
coilDF <- as.data.frame(read.csv("Suspension_Coil.csv"))
coil_summary <- summarize(coilDF, .groups = "PSI")
View(coil_summary)
# Read suspension Data
coilDF <- as.data.frame(read.csv("Suspension_Coil.csv"))
coil_summary <- coilDF %>% summarise(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI),SD=sd(PSI))
View(coil_summary)
# Read suspension Data
coilDF <- as.data.frame(read.csv("Suspension_Coil.csv"))
total_summary <- coilDF %>% summarise(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI),SD=sd(PSI))
# Read suspension Data
coilDF <- as.data.frame(read.csv("Suspension_Coil.csv"))
# Calculate statistics of all the coils
total_summary <- coilDF %>% summarise(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI),SD=sd(PSI))
# Calculate statistics of all the coils
coil_summary <- coilDF %>% group_by(Manufacturing_Lot) %>% summarise(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI),SD=sd(PSI))
View(coil_summary)
View(coil_summary)
View(total_summary)
# Deliverable 3
# Run a T-Test against the coils together.
t.test(coilDF$PSI,mu=mean(coilDF$PSI))
View(coilDF)
# Deliverable 3
# Run a T-Test against the coils together.
t.test(log10(coilDF$PSI),mu=meanlog10((coilDF$PSI)))
# Deliverable 3
# Run a T-Test against the coils together.
t.test(log10(coilDF$PSI),mu=mean(log10((coilDF$PSI)))
# Deliverable 3
# Run a T-Test against the coils together.
t.test(log10(coilDF$PSI)),mu=mean(log10((coilDF$PSI)))
# Deliverable 3
# Run a T-Test against the coils together.
t.test(log10(coilDF$PSI),mu=mean(log10(coilDF$PSI)))
# Deliverable 3
# Run a T-Test against the coils together.
t.test(log10(coilDF$PSI),mu=mean(coilDF$PSI))
# Deliverable 3
# Run a T-Test against the coils together.
t.test(coilDF$PSI,mu=mean(coilDF$PSI))
# Deliverable 3
# Run a T-Test against the coils together.
t.test(coilDF$PSI,mu=mean(coilDF$PSI))
coilDF$PSI
mean(coilDF$PSI)
?t.test
# Deliverable 3.1
# Run a T-Test against the coils together.
t.test(coilDF$PSI,mu=1500)
# Deliverable 3.2
# Run a T-Test against the coil lots.
t.test(coilDF$PSI,mu=1500,subset(Manufacturing_Lot))
# Deliverable 3.2
# Run a T-Test against the coil lots.
with(coilDF, t.test(PSI[Manufacturing_Lot == 1], PSI[Manufacturing_Lot == 2], PSI[Manufacturing_Lot == 3]))
# Deliverable 3.2
# Run a T-Test against the coil lots.
with(coilDF, t.test(PSI[Manufacturing_Lot == 1], PSI[Manufacturing_Lot == 2], PSI[Manufacturing_Lot == 3], alternative = NULL))
# Deliverable 3.2
# Run a T-Test against the coil lots.
with(coilDF, t.test(PSI[Manufacturing_Lot == 1], PSI[Manufacturing_Lot == 2], PSI[Manufacturing_Lot == 3],mu=1500, alternative = NULL))
# Deliverable 3.2
# Run a T-Test against the coil lots.
t.test(PSI ~ Manufacturing_Lot, data=coilDF)
# Deliverable 3.2
# Run a T-Test against the coil lots.
t.test(PSI ~ Manufacturing_Lot, data=coilDF)
# Deliverable 3.2
# Run a T-Test against the coil lots.
t.test(PSI,Manufacturing_Lot, data=coilDF)
# Deliverable 3.2
# Run a T-Test against the coil lots.
t.test(coilDF$PSI,coilDF$Manufacturing_Lot)
# Deliverable 3.2
# Run a T-Test against the coil lots.
t.test(coilDF$PSI,coilDF$Manufacturing_Lot,mu=1500)
# Deliverable 3.2
# Run a T-Test against the coil lots.
t.test(y=coilDF$PSI,x=coilDF$Manufacturing_Lot,mu=1500)
# Deliverable 3.2
# Run a T-Test against the coil lots.
t.test(Manufacturing_Lot ~ PSI, data=coilDF)
# Deliverable 3.2
# Run a T-Test against the coil lots.
t.test(PSI,Manufacturing_Lot,data=coilDF,paired=T)
# Deliverable 3.2
# Run a T-Test against the coil lots.
t.test(coilDF$PSI,coilDF$Manufacturing_Lot,mu=1500,paired=T)
View(coilDF)
# Deliverable 3.2
# Run a T-Test against the coil lots.
coilDF %>% group_by(Manufacturing_Lot) %>% t.test(PSI,mu=1500)
# Deliverable 3.2
# Run a T-Test against the coil lots.
coilDF %>% group_by(Manufacturing_Lot) %>% t.test(coilDF$PSI,mu=1500)
# Deliverable 3.2.1
# Run a T-Test against the coil lots.
t.test(coilDF$PSI,mu=1500,subset(coilDF$Manufacturing_Lot == Lot1))
# Deliverable 3.2.1
# Run a T-Test against the coil lots.
t.test(coilDF$PSI,mu=1500,subset(coilDF$Manufacturing_Lot == "Lot1"))
# Deliverable 3.2.1
# Run a T-Test against the coil lots.
t.test(coilDF$PSI,mu=1500,subset(coilDF$Manufacturing_Lot == Lot1))
# Deliverable 3.2.1
# Run a T-Test against the coil lots.
t.test(coilDF$PSI,mu=1500,subset(coilDF$Manufacturing_Lot == Lot1))
# Deliverable 3.2.1
# Run a T-Test against the coil lots.
t.test(coilDF$PSI,mu=1500,subset(coilDF$Manufacturing_Lot))
?subset
# Deliverable 3.2.1
# Run a T-Test against the coil lots.
t.test(coilDF$PSI,mu=1500,subset(coilDF,Manufacturing_Lot == Lot1))
# Deliverable 3.2.1
# Run a T-Test against the coil lots.
t.test(coilDF$PSI,mu=1500,subset(coilDF, Manufacturing_Lot == 'Lot1'))
# Deliverable 3.2.1
# Run a T-Test against the coil lots.
t.test(coilDF$PSI,mu=1500,subset(coilDF, Manufacturing_Lot == Lot1))
# Deliverable 3.2.1
# Run a T-Test against the coil lots.
t.test(coilDF$PSI,mu=1500,subset(coilDF, Manufacturing_Lot == Lot1))
# Deliverable 3.2.1
# Run a T-Test against the coil lots.
t.test(coilDF$PSI,mu=1500,subset(coilDF, Manufacturing_Lot == Lot1,select = c(PSI,Manufacturing_Lot)))
?coilDF
# Deliverable 3.2.1
# Run a T-Test against the coil lots.
t.test(coilDF$PSI,mu=1500,subset(coilDF,Manufacturing_Lot == Lot1,select = c(Manufacturing_Lot,PSI)))
# Deliverable 3.2.1
# Run a T-Test against the coil lots.
LotDF <- coilDF %>% group_by(Manufacturing_Lot)
View(LotDF)
View(coilDF)
# Deliverable 3.2.1
# Run a T-Test against the coil lots.
t.test(coilDF$PSI,mu=1500,subset(coilDF$Manufacturing_Lot == Lot1))
# Deliverable 3.2.1
# Run a T-Test against the coil lots.
t.test(coilDF$PSI,mu=1500,subset(coilDF$Manufacturing_Lot == 1))
# Deliverable 3.2.1
# Run a T-Test against the coil lots.
t.test(coilDF$PSI,mu=1500,subset(Manufacturing_Lot == Lot1))
# Deliverable 3.2.1
# Run a T-Test against the coil lots.
t.test(coilDF$PSI,mu=1500,subset(coilDF$Manufacturing_Lot == Lot1))
# Deliverable 3.2.1
# Run a T-Test against the coil lots.
t.test(coilDF$PSI,mu=1500,subset(coilDF$Manufacturing_Lot === Lot1))
# Deliverable 3.2.1
# Run a T-Test against the coil lots.
t.test(coilDF$PSI,mu=1500,subset(coilDF$Manufacturing_Lot = Lot1))
# Deliverable 3.2.1
# Run a T-Test against the coil lots.
t.test(coilDF$PSI,mu=1500,subset(coilDF$Manufacturing_Lot == Lot1))
# Deliverable 3.2.1
# Run a T-Test against the coil lots.
t.test(coilDF$PSI,mu=1500,subset(coilDF$Manufacturing_Lot == 'Lot1'))
# Deliverable 3.2.1
# Run a T-Test against the coil lots.
#t.test(coilDF$PSI,mu=1500,subset(coilDF$Manufacturing_Lot == Lot1))
Lot1 <- coilDF[coilDF$Manufacturing_Lot == Lot1,]
View(coilDF)
# Deliverable 3.2.1
# Run a T-Test against the coil lots.
#t.test(coilDF$PSI,mu=1500,subset(coilDF$Manufacturing_Lot == Lot1))
Lot1 <- coilDF[coilDF$Manufacturing_Lot == "Lot1",]
View(Lot1)
View(Lot1)
# Deliverable 3.2.1
# Run a T-Test against the coil lots.
t.test(coilDF$PSI,mu=1500,subset(coilDF$Manufacturing_Lot == "Lot1"))
# Deliverable 3.2.1
# Run a T-Test against the coil lots.
t.test(coilDF$PSI,mu=1500,subset(coilDF$Manufacturing_Lot == "Lot1",))
# Deliverable 3.2.1
# Run a T-Test against the coil lots.
t.test(coilDF$PSI,mu=1500,subset(coilDF,Manufacturing_Lot == "Lot1",select = PSI))
t.test(Lot1,mu=1500)
t.test(Lot1$PSI,mu=1500)
View(Lot1)
t.test(coilDF$PSI,mu=1500,subset(coilDF,Manufacturing_Lot == "Lot1",select = PSI))
t.test(coilDF$PSI,mu=1500,subset(coilDF$PSI,Manufacturing_Lot == "Lot1",select = PSI))
View(coilDF)
t.test(coilDF$PSI,mu=1500,subset(coilDF,Manufacturing_Lot == "Lot1",select = PSI,drop = Vehicle_ID,Manufacturing_Lot))
t.test(coilDF$PSI,mu=1500,subset(coilDF,Manufacturing_Lot == "Lot1",select = PSI,drop = VehicleID,Manufacturing_Lot))
t.test(coilDF$PSI,mu=1500,subset(coilDF,Manufacturing_Lot == "Lot1",select = PSI,drop = VehicleID,Manufacturing_Lot))
View(coilDF)
t.test(coilDF$PSI,mu=1500,subset(coilDF,Manufacturing_Lot == "Lot1",select = PSI,drop = F))
t.test(coilDF$PSI,mu=1500,subset(coilDF,Manufacturing_Lot == "Lot1",select = PSI,drop = T))
t.test(Lot1$PSI,mu=1500)
View(Lot1)
Lot1 <- coilDF[coilDF$Manufacturing_Lot == "Lot1"]
Lot1 <- coilDF[coilDF$Manufacturing_Lot == Lot1]
# Deliverable 3.2.1
# Run a T-Test against the coil lots.
Lot1 <- coilDF[coilDF$Manufacturing_Lot == "Lot1"]
# Deliverable 3.2.1
# Run a T-Test against the coil lots.
Lot1 <- subset(coilDF,Manufacturing_Lot == "Lot1",)
t.test(Lot1$PSI,mu=1500)
View(Lot1)
Lot1 <- subset(coilDF,Manufacturing_Lot == "Lot1",)
Lot1 <- subset(coilDF,Manufacturing_Lot == "Lot2",)
View(Lot1)
t.test(Lot1$PSI,mu=1500)
t.test(Lot2$PSI,mu=1500)
# Deliverable 3.2.2
# Run a T-Test against the coil lots.
Lot2 <- subset(coilDF,Manufacturing_Lot == "Lot2",)
t.test(Lot2$PSI,mu=1500)
# Deliverable 3.2.2
# Run a T-Test against the coil lots.
Lot2 <- subset(coilDF,Manufacturing_Lot == "Lot2",)
t.test(Lot2$PSI,mu=1500)
# Deliverable 3.2.3
# Run a T-Test against the coil lots.
Lot3 <- subset(coilDF,Manufacturing_Lot == "Lot3",)
t.test(Lot3$PSI,mu=1500)
# Deliverable 3.2.1
# Run a T-Test against the coil lots.
Lot1 <- subset(coilDF,Manufacturing_Lot == "Lot1",)
t.test(Lot1$PSI,mu=1500)
